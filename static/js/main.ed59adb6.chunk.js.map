{"version":3,"sources":["helpers/firebase.js","views/content.js","components/CardTitle.js","helpers/ImageToBase64.js","views/App.js","serviceWorker.js","assets/theme.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","signInWithEmailAndPassword","then","a","console","log","storage","firestore","analytics","path","data","_","isEmpty","nameFile","moment","format","ref","child","putString","getDownloadURL","listAll","list","Promise","all","items","map","m","location","path_","useState","sizeImage","setSizeImage","images","setImages","useEffect","Images","listImages","window","document","body","clientWidth","Grid","templateColumns","gridAutoFlow","gap","length","i","Image","key","w","src","alt","CardTitle","props","state","Flex","align","justify","direction","bg","Text","className","size","rounded","objectFit","Component","el","temporaryFileReader","FileReader","resolve","reject","onerror","abort","DOMException","onload","result","readAsDataURL","App","isOpen","image","imageName","handerFieldImage","name","target","file","files","ImageToBase64","setState","save","Storage","uploadImage","alert","addEventListener","event","Drawer","this","placement","onClose","Input","placeholder","type","onChange","Button","variant","mr","onClick","color","Boolean","hostname","match","theme","colors","brand","900","800","700","ReactDOM","render","StrictMode","ThemeProvider","customTheme","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed59adb6.chunk.js","sourcesContent":["import firebase from \"firebase\";\nimport moment from \"moment\";\nimport _ from \"lodash\";\n\nconst config = {\n  apiKey: \"AIzaSyDpSdqUmlHnyttpymhH3d7o8Xkh_-sPac4\",\n  authDomain: \"photography-a8d79.firebaseapp.com\",\n  databaseURL: \"https://photography-a8d79.firebaseio.com\",\n  projectId: \"photography-a8d79\",\n  storageBucket: \"photography-a8d79.appspot.com\",\n  messagingSenderId: \"564831207858\",\n  appId: \"1:564831207858:web:82e5b644759c4b6a2d64ab\",\n  measurementId: \"G-CQ5N5ZDSRQ\",\n};\n\nfirebase.initializeApp(config);\n\nconst auth = firebase.auth();\nconst base = auth\n  .signInWithEmailAndPassword(\"joerverson.santos@gmail.com\", \"loginphoto0420\")\n  .then((a) => console.log(a));\n\nexport const storage = firebase.storage();\nexport const firestore = firebase.firestore();\n\nfirebase.analytics();\n\nclass DatabaseFirebase {\n  async uploadImage(path, data) {\n    if (!_.isEmpty(data)) {\n      const nameFile = `${path}/${moment().format(\"x\")}.jpg`;\n      await storage.ref().child(nameFile).putString(data, \"data_url\");\n\n      return await (await storage.ref(nameFile)).getDownloadURL();\n    }\n\n    return data;\n  }\n\n  async listImages() {\n    const list = await await storage.ref().child(\"photos/\").listAll();\n    return await Promise.all(\n      list.items.map(\n        async (m) => await storage.ref(m.location.path_).getDownloadURL()\n      )\n    );\n  }\n}\n\nexport default new DatabaseFirebase();\n","import React, { useEffect, useState } from \"react\";\nimport { Image, Stack, ListIcon, Grid } from \"@chakra-ui/core\";\nimport Images from \"../helpers/firebase\";\n\nexport default function ({ ...props }) {\n  const [sizeImage, setSizeImage] = useState(0);\n  const [images, setImages] = useState([]);\n\n  useEffect(() => {\n    Images.listImages().then((images) => setImages(images));\n    setSizeImage(window.document.body.clientWidth / 3);\n  }, []);\n\n  return (\n    <>\n      <Grid templateColumns=\"repeat(3, 1fr)\" gridAutoFlow gap={1}>\n        {images.length &&\n          images.map((m, i) => (\n            <Image key={i} w={`${sizeImage}px`} src={m} alt=\"ops\" />\n          ))}\n      </Grid>\n    </>\n  );\n}\n","import React, { Component } from 'react'\nimport { Flex, Text, Image, Box, Link } from \"@chakra-ui/core\";\nimport './CardTitle.css'\n\nclass CardTitle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n  render() {\n    return (\n      <Flex w='100%' align={'center'} justify={'center'} direction={'row'} bg={'#1c1c1c'}>\n        <Text className=\"site-name\">Jhoe's</Text>\n        <Text className=\"site-name small-text\">photograph</Text>\n        <Image\n          size=\"200px\"\n          rounded=\"full\"\n          objectFit=\"cover\"\n          src=\"https://firebasestorage.googleapis.com/v0/b/photography-a8d79.appspot.com/o/tumblr_ntnnq7KthB1tkblq0o1_500.gif?alt=media&token=2259974e-497c-491d-8325-b1c3fee66db0\"\n          alt=\"Segun Adebayo\"\n        />\n      </Flex>\n    );\n  }\n}\n\nexport default CardTitle;","export default {\n    convert: el => {\n        const temporaryFileReader = new FileReader()\n\n        return new Promise((resolve, reject) => {\n            temporaryFileReader.onerror = () => {\n                temporaryFileReader.abort()\n                reject(new DOMException(\"Problem parsing input file.\"))\n            }\n\n            temporaryFileReader.onload = () => {\n                resolve(temporaryFileReader.result)\n            }\n\n            temporaryFileReader.readAsDataURL(el)\n        })\n    }\n}","import React, { Component } from \"react\";\n\n// components\nimport Content from \"./content\";\nimport CardTitle from \"../components/CardTitle\";\n// styles\nimport \"./App.css\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  Button,\n  Input,\n} from \"@chakra-ui/core\";\nimport ImageToBase64 from \"../helpers/ImageToBase64\";\nimport Storage from \"../helpers/firebase\";\n\nclass App extends Component {\n  state = {\n    isOpen: false,\n    image: null,\n    imageName: \"\",\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"keypress\", (event) => {\n      const keyName = event.key;\n      if (keyName === \"o\") {\n        this.setState({\n          isOpen: !this.state.isOpen,\n        });\n      }\n    });\n  }\n\n  handerFieldImage = async (el) => {\n    const name = el.target.name;\n    const file = el.target.files[0];\n    const data = await ImageToBase64.convert(file);\n\n    this.setState({\n      image: data,\n      imageName: name,\n    });\n  };\n\n  save = async () => {\n    const { image, imageName } = this.state;\n    try {\n      await Storage.uploadImage(`photos/${imageName}`, image);\n      alert(\"Done\");\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Drawer\n          isOpen={this.state.isOpen}\n          placement=\"right\"\n          onClose={() => this.setState({ isOpen: !this.state.isOpen })}\n        >\n          <DrawerOverlay />\n          <DrawerContent>\n            <DrawerCloseButton />\n            <DrawerHeader>Add Image</DrawerHeader>\n\n            <DrawerBody>\n              <Input\n                placeholder=\"Type here...\"\n                type=\"file\"\n                onChange={this.handerFieldImage}\n              />\n            </DrawerBody>\n\n            <DrawerFooter>\n              <Button\n                variant=\"outline\"\n                mr={3}\n                onClick={() => this.setState({ isOpen: !this.state.isOpen })}\n              >\n                Cancel\n              </Button>\n              <Button color=\"blue\" onClick={this.save}>\n                Save\n              </Button>\n            </DrawerFooter>\n          </DrawerContent>\n        </Drawer>\n        <CardTitle />\n        <Content />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { theme } from \"@chakra-ui/core\";\n\n// Let's say you want to add custom colors\nexport default {\n    ...theme,\n    colors: {\n        ...theme.colors,\n        brand: {\n            900: \"#1a365d\",\n            800: \"#153e75\",\n            700: \"#2a69ac\",\n        },\n    },\n};","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.css\";\nimport App from \"./views/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider } from \"@chakra-ui/core\";\nimport customTheme from \"./assets/theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={customTheme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}